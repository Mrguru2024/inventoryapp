generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String?        @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  role                String         @default("USER")
  isApproved          Boolean        @default(false)
  accounts            Account[]
  activities          Activity[]
  createdInventory    Inventory[]    @relation("CreatedInventory")
  technicianInventory Inventory[]    @relation("TechnicianInventory")
  receivedMessages    Message[]      @relation("ReceivedMessages")
  messages            Message[]      @relation("SentMessages")
  notifications       Notification[]
  requests            Request[]
  sessions            Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
  senderId    String
  recipientId String
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([recipientId])
}

model Inventory {
  id                String          @id @default(cuid())
  sku               String          @unique
  brand             String
  model             String
  stockCount        Int             @default(0)
  lowStockThreshold Int             @default(5)
  price             Float
  fccId             String?
  frequency         String?
  purchaseSource    String?
  isSmartKey        Boolean         @default(false)
  isTransponderKey  Boolean         @default(false)
  isDualSystem      Boolean         @default(false)
  carMake           String?
  carModel          String?
  carYear           Int?
  notes             String?
  status            String          @default("ACTIVE")
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  createdById       String
  createdBy         User            @relation("CreatedInventory", fields: [createdById], references: [id])
  technicianId      String?
  technician        User?           @relation("TechnicianInventory", fields: [technicianId], references: [id])
  requests          Request[]
  transponderKeyId  String?
  transponderKey    TransponderKey? @relation("TransponderKeyToInventory", fields: [transponderKeyId], references: [id])

  @@index([createdById])
  @@index([technicianId])
  @@index([status])
  @@index([sku])
  @@index([transponderKeyId])
}

model Request {
  id                String    @id @default(cuid())
  technicianId      String
  inventoryId       String
  quantityRequested Int
  status            String    @default("PENDING")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  item              Inventory @relation(fields: [inventoryId], references: [id])
  technician        User      @relation(fields: [technicianId], references: [id])

  @@index([technicianId])
  @@index([inventoryId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model TransponderKey {
  id              String                @id @default(cuid())
  make            String
  model           String
  yearStart       Int
  yearEnd         Int?
  transponderType String
  chipType        String                @db.Text
  compatibleParts String                @db.Text
  frequency       String?
  notes           String?
  dualSystem      Boolean               @default(false)
  fccId           String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  inventoryItems  Inventory[]           @relation("TransponderKeyToInventory")
  inventory       TransponderInventory?

  @@index([make])
  @@index([model])
  @@index([yearStart])
  @@index([transponderType])
  @@index([fccId])
}

model TransponderInventory {
  id               String         @id @default(cuid())
  transponderKeyId String         @unique
  quantity         Int            @default(0)
  minimumStock     Int            @default(5)
  location         String
  supplier         String
  lastOrdered      DateTime?
  notes            String?        @db.Text
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  transponderKey   TransponderKey @relation(fields: [transponderKeyId], references: [id])

  @@index([transponderKeyId])
}

model SearchAnalytics {
  id           String   @id @default(cuid())
  query        String
  category     String
  resultsCount Int
  filters      String   @db.Text
  createdAt    DateTime @default(now())

  @@index([category])
  @@index([createdAt])
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String   @db.Text
  timestamp   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([timestamp])
}

model FCCId {
  id          String   @id
  description String
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([id])
}
