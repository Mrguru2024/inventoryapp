generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(CUSTOMER)
  isApproved    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Inventory {
  id                Int       @id @default(autoincrement())
  sku               String    @unique
  brand             String
  model             String
  stockCount        Int       @default(0)
  lowStockThreshold Int       @default(5)
  requests          Request[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Request {
  id               Int       @id @default(autoincrement())
  technician       User      @relation(fields: [technicianId], references: [id])
  technicianId     Int
  item             Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId      Int
  quantityRequested Int
  status           Status    @default(PENDING)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model TransponderKey {
  id              Int       @id @default(autoincrement())
  make            String
  model           String
  yearStart       Int?
  yearEnd         Int?
  transponderType String
  chipType        Json      // Stored as JSON
  compatibleParts Json?     // Stored as JSON
  frequency       String?
  notes           String?   @db.Text
  dualSystem      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inventory       TransponderInventory?

  @@index([make, model])
}

model TransponderInventory {
  id              Int            @id @default(autoincrement())
  transponderKey  TransponderKey @relation(fields: [transponderKeyId], references: [id])
  transponderKeyId Int           @unique
  quantity        Int            @default(0)
  minimumStock    Int            @default(5)
  location        String
  supplier        String
  lastOrdered     DateTime?
  notes           String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    Int
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId Int
}

enum Role {
  ADMIN
  TECHNICIAN
  CUSTOMER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
} 