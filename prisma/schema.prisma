generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(TECHNICIAN)
  emailVerified DateTime?
  requests  Request[]
  keyCheckouts KeyCheckout[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Inventory {
  id                Int       @id @default(autoincrement())
  sku               String    @unique
  brand             String
  model             String
  stockCount        Int       @default(0)
  lowStockThreshold Int       @default(5)
  requests          Request[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Request {
  id               Int       @id @default(autoincrement())
  technician       User      @relation(fields: [technicianId], references: [id])
  technicianId     Int
  item             Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId      Int
  quantityRequested Int
  status           Status    @default(PENDING)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Key {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  partNumber        String   @unique
  year              String
  make             String
  model            String
  fccId            String?
  icNumber         String?
  continentalNumber String?
  frequency        String
  battery          String
  emergencyKey     String?
  testKey          String?
  manufacturer     String
  buttons          Json
  notes            String?
  status           KeyStatus @default(AVAILABLE)
  checkouts        KeyCheckout[]

  @@index([make, model, year])
  @@index([partNumber])
}

model KeyCheckout {
  id        String   @id @default(cuid())
  keyId     String
  key       Key      @relation(fields: [keyId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  checkedOut DateTime @default(now())
  checkedIn  DateTime?
  notes      String?

  @@index([keyId])
  @@index([userId])
}

model TransponderKey {
  id              String   @id @default(cuid())
  make            String
  model           String
  yearStart       Int
  yearEnd         Int?
  transponderType String
  chipType        String   // JSON string of array
  compatibleParts String?  // JSON string of array
  notes           String?
  dualSystem      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([make, model])
  @@index([transponderType])
}

model TransponderInventory {
  id              String   @id @default(cuid())
  transponderType String
  chipType        String   @default("[]")
  quantity        Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model SearchAnalytics {
  id           String   @id @default(cuid())
  query        String
  category     String
  resultsCount Int
  filters      String?  // JSON string
  timestamp    DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum Role {
  ADMIN
  TECHNICIAN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum KeyStatus {
  AVAILABLE
  CHECKED_OUT
  MAINTENANCE
  LOST
}
