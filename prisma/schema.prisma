generator client {
  provider = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER") // USER, TECHNICIAN, ADMIN, SUPER_ADMIN
  isApproved    Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  messages      Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  technicianInventory Inventory[] @relation("TechnicianInventory")
  createdInventory Inventory[] @relation("CreatedInventory")
  requests      Request[]
  notifications Notification[]
  activities    Activity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id          String   @id @default(cuid())
  content     String   @db.Text
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId    String
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  recipientId String

  @@index([senderId])
  @@index([recipientId])
}

model Inventory {
  id                String   @id @default(cuid())
  sku               String   @unique
  brand             String
  model             String
  stockCount        Int      @default(0)
  lowStockThreshold Int      @default(5)
  price             Float
  fccId             String?
  frequency         String?
  purchaseSource    String?
  isSmartKey        Boolean  @default(false)
  isTransponderKey  Boolean  @default(false)
  carMake           String?
  carModel          String?
  carYear           Int?
  notes             String?
  status            String   @default("PENDING")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  technicianId      String?
  createdBy         String?
  technician        User?    @relation("TechnicianInventory", fields: [technicianId], references: [id])
  creator           User?    @relation("CreatedInventory", fields: [createdBy], references: [id])
  requests          Request[]
  transponderKey    TransponderKey? @relation("TransponderKeyToInventory", fields: [transponderKeyId], references: [id])
  transponderKeyId  String?

  @@index([brand], name: "Inventory_brand_idx")
  @@index([model], name: "Inventory_model_idx")
  @@index([carMake], name: "Inventory_carMake_idx")
  @@index([carModel], name: "Inventory_carModel_idx")
  @@index([carYear], name: "Inventory_carYear_idx")
  @@index([fccId], name: "Inventory_fccId_idx")
  @@index([technicianId], name: "Inventory_technicianId_idx")
  @@index([createdBy], name: "Inventory_createdBy_idx")
  @@index([transponderKeyId], name: "Inventory_transponderKeyId_idx")
}

model Request {
  id               String    @id @default(cuid())
  technician       User      @relation(fields: [technicianId], references: [id])
  technicianId     String
  item             Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId      String
  quantityRequested Int
  status           String    @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([technicianId])
  @@index([inventoryId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

model TransponderKey {
  id              String   @id @default(cuid())
  make            String
  model           String
  yearStart       Int
  yearEnd         Int?
  transponderType String
  chipType        String   @db.Text
  compatibleParts String   @db.Text
  frequency       String?
  notes           String?
  dualSystem      Boolean  @default(false)
  fccId           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  inventory       TransponderInventory?
  inventoryItems  Inventory[]          @relation("TransponderKeyToInventory")

  @@index([make], name: "TransponderKey_make_idx")
  @@index([model], name: "TransponderKey_model_idx")
  @@index([yearStart], name: "TransponderKey_yearStart_idx")
  @@index([transponderType], name: "TransponderKey_transponderType_idx")
  @@index([fccId], name: "TransponderKey_fccId_idx")
}

model TransponderInventory {
  id              String         @id @default(cuid())
  transponderKey  TransponderKey @relation(fields: [transponderKeyId], references: [id])
  transponderKeyId String        @unique
  quantity        Int            @default(0)
  minimumStock    Int            @default(5)
  location        String
  supplier        String
  lastOrdered     DateTime?
  notes           String?        @db.Text
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([transponderKeyId], name: "TransponderInventory_transponderKeyId_idx")
}

model SearchAnalytics {
  id           String   @id @default(cuid())
  query        String
  category     String
  resultsCount Int
  filters      String   @db.Text
  createdAt    DateTime @default(now())

  @@index([category])
  @@index([createdAt])
}

model Activity {
  id          String   @id @default(cuid())
  type        String
  description String   @db.Text
  timestamp   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String

  @@index([userId])
  @@index([timestamp])
}

enum Role {
  ADMIN
  TECHNICIAN
  CUSTOMER
}

enum Status {
  PENDING
  APPROVED
  REJECTED
} 